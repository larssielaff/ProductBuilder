@using ProductBuilder.Application.ViewModels.UserRoleApi
@using ProductBuilder.Application.ViewModels.EpicApi
@using ProductBuilder.Application.ViewModels.TopicApi
@using ProductBuilder.Application.ViewModels.UserStoryApi

@{
    ViewData["Title"] = "Product";
}

@section head{
    <style>
        table {
            width:100% !important;
        }

        .tab-content {
            padding-top: 16px;
            padding-bottom: 16px;
        }
    </style>
}

<div>
    @* modal-create-UserRole *@
    <div id="modal-create-UserRole" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="modal-create-UserRole-label">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Schließen">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 id="modal-create-UserRole-label" class="modal-title">Benutzerrolle erstellen</h4>
                </div>
                <div class="modal-body">
                    @* form-CreateUserRole *@
                    <form id="form-CreateUserRole" action="@Url.RouteUrl(nameof(UserRoleApiController.CreateUserRole))">
                        <div>
                            @Html.AntiForgeryToken()
                        </div>
                        <div class="form-group">
                            <label class="control-label" for="input-CreateUserRole-UserRole-Role">Benutzerrolle</label>
                            <input id="input-CreateUserRole-UserRole-Role" type="text" class="form-control" required="required" name="@nameof(CreateUserRoleApiViewModel.Role)" />
                        </div>
                        <button id="button-CreateUserRole" type="button" class="btn btn-success pull-right">Benutzerrolle erstellen</button>
                        <div class="clearfix"></div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Schließen</button>
                </div>
            </div>
        </div>
    </div>
    @* modal-detail-UserRole *@
    <div id="modal-detail-UserRole" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="modal-detail-UserRole-label">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Schließen">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 id="modal-detail-UserRole-label" class="modal-title">Benutzerrolle</h4>
                </div>
                <div class="modal-body">
                    @* form-DeleteUserRole *@
                    <form id="form-DeleteUserRole" action="@Url.RouteUrl(nameof(UserRoleApiController.DeleteUserRole))">
                        <div>
                            @Html.AntiForgeryToken()
                            <input id="input-DeleteUserRole-UserRole-Id" required="required" hidden="hidden" name="@nameof(DeleteUserRoleApiViewModel.Id)" />
                        </div>
                        <button id="button-DeleteUserRole" type="button" class="btn btn-danger pull-right">Benutzerrolle löschen</button>
                        <div class="clearfix"></div>
                    </form>
                    @* form-UpdateUserRole *@
                    <form id="form-UpdateUserRole" action="@Url.RouteUrl(nameof(UserRoleApiController.UpdateUserRole))">
                        <div>
                            @Html.AntiForgeryToken()
                            <input id="input-UpdateUserRole-UserRole-Id" required="required" hidden="hidden" name="@nameof(UpdateUserRoleApiViewModel.Id)" />
                        </div>
                        <div class="form-group">
                            <label class="control-label" for="input-UpdateUserRole-UserRole-Role">Benutzerrolle</label>
                            <input id="input-UpdateUserRole-UserRole-Role" type="text" class="form-control" required="required" name="@nameof(UpdateUserRoleApiViewModel.Role)" />
                        </div>
                        <button id="button-UpdateUserRole" type="button" class="btn btn-success pull-right">Benutzerrolle aktualisieren</button>
                        <div class="clearfix"></div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Schließen</button>
                </div>
            </div>
        </div>
    </div>
    @* modal-create-Epic *@
    <div id="modal-create-Epic" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="modal-create-Epic-label">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Schließen">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 id="modal-create-Epic-label" class="modal-title">Epic erstellen</h4>
                </div>
                <div class="modal-body">
                    @* form-CreateEpic *@
                    <form id="form-CreateEpic" action="@Url.RouteUrl(nameof(EpicApiController.CreateEpic))">
                        <div>
                            @Html.AntiForgeryToken()
                        </div>
                        <div class="form-group">
                            <label class="control-label" for="input-CreateEpic-Epic-Title">Titel</label>
                            <input id="input-CreateEpic-Epic-Title" type="text" class="form-control" required="required" name="@nameof(CreateEpicApiViewModel.Title)" />
                        </div>
                        <div class="form-group">
                            <label class="control-label" for="input-CreateEpic-Epic-Description">Beschreibung</label>
                            <input id="input-CreateEpic-Epic-Description" type="text" class="form-control" required="required" name="@nameof(CreateEpicApiViewModel.Description)" />
                        </div>
                        <button id="button-CreateEpic" type="button" class="btn btn-success pull-right">Epic erstellen</button>
                        <div class="clearfix"></div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Schließen</button>
                </div>
            </div>
        </div>
    </div>
    @* modal-detail-Epic *@
    <div id="modal-detail-Epic" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="modal-detail-Epic-label">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Schließen">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 id="modal-detail-Epic-label" class="modal-title">Epic</h4>
                </div>
                <div class="modal-body">
                    @* form-DeleteEpic *@
                    <form id="form-DeleteEpic" action="@Url.RouteUrl(nameof(EpicApiController.DeleteEpic))">
                        <div>
                            @Html.AntiForgeryToken()
                            <input id="input-DeleteEpic-Epic-Id" required="required" hidden="hidden" name="@nameof(DeleteEpicApiViewModel.Id)" />
                        </div>
                        <button id="button-DeleteEpic" type="button" class="btn btn-danger pull-right">Epic löschen</button>
                        <div class="clearfix"></div>
                    </form>
                    @* form-UpdateEpic *@
                    <form id="form-UpdateEpic" action="@Url.RouteUrl(nameof(EpicApiController.UpdateEpic))">
                        <div>
                            @Html.AntiForgeryToken()
                            <input id="input-UpdateEpic-Epic-Id" required="required" hidden="hidden" name="@nameof(UpdateEpicApiViewModel.Id)" />
                        </div>
                        <div class="form-group">
                            <label class="control-label" for="input-UpdateEpic-Epic-Title">Titel</label>
                            <input id="input-UpdateEpic-Epic-Title" type="text" class="form-control" required="required" name="@nameof(UpdateEpicApiViewModel.Title)" />
                        </div>
                        <div class="form-group">
                            <label class="control-label" for="input-UpdateEpic-Epic-Description">Beschreibung</label>
                            <input id="input-UpdateEpic-Epic-Description" type="text" class="form-control" required="required" name="@nameof(UpdateEpicApiViewModel.Description)" />
                        </div>
                        <button id="button-UpdateEpic" type="button" class="btn btn-success pull-right">Epic aktualisieren</button>
                        <div class="clearfix"></div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Schließen</button>
                </div>
            </div>
        </div>
    </div>
    @* modal-create-Topic *@
    <div id="modal-create-Topic" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="modal-create-Topic-label">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Schließen">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 id="modal-create-Topic-label" class="modal-title">Topic erstellen</h4>
                </div>
                <div class="modal-body">
                    @* form-CreateTopic *@
                    <form id="form-CreateTopic" action="@Url.RouteUrl(nameof(TopicApiController.CreateTopic))">
                        <div>
                            @Html.AntiForgeryToken()
                        </div>
                        <div class="form-group">
                            <label class="control-label" for="input-CreateTopic-Topic-Title">Titel</label>
                            <input id="input-CreateTopic-Topic-Title" type="text" class="form-control" required="required" name="@nameof(CreateTopicApiViewModel.Title)" />
                        </div>
                        <div class="form-group">
                            <label class="control-label" for="input-CreateTopic-Topic-Description">Beschreibung</label>
                            <input id="input-CreateTopic-Topic-Description" type="text" class="form-control" required="required" name="@nameof(CreateTopicApiViewModel.Description)" />
                        </div>
                        <button id="button-CreateTopic" type="button" class="btn btn-success pull-right">Topic erstellen</button>
                        <div class="clearfix"></div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Schließen</button>
                </div>
            </div>
        </div>
    </div>
    @* modal-detail-Topic *@
    <div id="modal-detail-Topic" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="modal-detail-Topic-label">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Schließen">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 id="modal-detail-Topic-label" class="modal-title">Thema</h4>
                </div>
                <div class="modal-body">
                    @* form-DeleteTopic *@
                    <form id="form-DeleteTopic" action="@Url.RouteUrl(nameof(TopicApiController.DeleteTopic))">
                        <div>
                            @Html.AntiForgeryToken()
                            <input id="input-DeleteTopic-Topic-Id" required="required" hidden="hidden" name="@nameof(DeleteTopicApiViewModel.Id)" />
                        </div>
                        <button id="button-DeleteTopic" type="button" class="btn btn-danger pull-right">Thema löschen</button>
                        <div class="clearfix"></div>
                    </form>
                    @* form-UpdateTopic *@
                    <form id="form-UpdateTopic" action="@Url.RouteUrl(nameof(TopicApiController.UpdateTopic))">
                        <div>
                            @Html.AntiForgeryToken()
                            <input id="input-UpdateTopic-Topic-Id" required="required" hidden="hidden" name="@nameof(UpdateTopicApiViewModel.Id)" />
                        </div>
                        <div class="form-group">
                            <label class="control-label" for="input-UpdateTopic-Topic-Title">Titel</label>
                            <input id="input-UpdateTopic-Topic-Title" type="text" class="form-control" required="required" name="@nameof(UpdateTopicApiViewModel.Title)" />
                        </div>
                        <div class="form-group">
                            <label class="control-label" for="input-UpdateTopic-Topic-Description">Beschreibung</label>
                            <input id="input-UpdateTopic-Topic-Description" type="text" class="form-control" required="required" name="@nameof(UpdateTopicApiViewModel.Description)" />
                        </div>
                        <button id="button-UpdateTopic" type="button" class="btn btn-success pull-right">Thema aktualisieren</button>
                        <div class="clearfix"></div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Schließen</button>
                </div>
            </div>
        </div>
    </div>
    @* modal-create-UserStory *@
    <div id="modal-create-UserStory" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="modal-create-UserStory-label">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Schließen">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 id="modal-create-UserStory-label" class="modal-title">User Story erstellen</h4>
                </div>
                <div class="modal-body">
                    @* form-CreateUserStory *@
                    <form id="form-CreateUserStory" action="@Url.RouteUrl(nameof(UserStoryApiController.CreateUserStory))">
                        <div>
                            @Html.AntiForgeryToken()
                        </div>
                        <div class="form-group">
                            <label class="control-label" for="input-CreateUserStory-UserStory-Title">Title</label>
                            <input id="input-CreateUserStory-UserStory-Title" type="text" class="form-control" required="required" name="@nameof(CreateUserStoryApiViewModel.Title)" />
                        </div>
                        <div class="form-group">
                            <label class="control-label" for="input-CreateUserStory-UserStory-Story">User Story</label>
                            <input id="input-CreateUserStory-UserStory-Story" type="text" class="form-control" required="required" name="@nameof(CreateUserStoryApiViewModel.Story)" />
                        </div>
                        <button id="button-CreateUserStory" type="button" class="btn btn-success pull-right">User Story erstellen</button>
                        <div class="clearfix"></div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Schließen</button>
                </div>
            </div>
        </div>
    </div>
    @* modal-detail-UserStory *@
    <div id="modal-detail-UserStory" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="modal-detail-UserStory-label">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Schließen">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 id="modal-detail-UserStory-label" class="modal-title">User Story</h4>
                </div>
                <div class="modal-body">
                    @* form-DeleteUserStory *@
                    <form id="form-DeleteUserStory" action="@Url.RouteUrl(nameof(UserStoryApiController.DeleteUserStory))">
                        <div>
                            @Html.AntiForgeryToken()
                            <input id="input-DeleteUserStory-UserStory-Id" required="required" hidden="hidden" name="@nameof(DeleteUserStoryApiViewModel.Id)" />
                        </div>
                        <button id="button-DeleteUserStory" type="button" class="btn btn-danger pull-right">User Story löschen</button>
                        <div class="clearfix"></div>
                    </form>
                    @* form-UpdateUserStory *@
                    <form id="form-UpdateUserStory" action="@Url.RouteUrl(nameof(UserStoryApiController.UpdateUserStory))">
                        <div>
                            @Html.AntiForgeryToken()
                            <input id="input-UpdateUserStory-UserStory-Id" required="required" hidden="hidden" name="@nameof(UpdateUserStoryApiViewModel.Id)" />
                        </div>
                        <div class="form-group">
                            <label class="control-label" for="input-UpdateUserStory-UserStory-Title">Title</label>
                            <input id="input-UpdateUserStory-UserStory-Title" type="text" class="form-control" required="required" name="@nameof(UpdateUserStoryApiViewModel.Title)" />
                        </div>
                        <div class="form-group">
                            <label class="control-label" for="input-UpdateUserStory-UserStory-Story">User Story</label>
                            <input id="input-UpdateUserStory-UserStory-Story" type="text" class="form-control" required="required" name="@nameof(UpdateUserStoryApiViewModel.Story)" />
                        </div>
                        <button id="button-UpdateUserStory" type="button" class="btn btn-success pull-right">User Story aktualisieren</button>
                        <div class="clearfix"></div>
                    </form>
                    <hr />
                    @* form-RemoveUserRole *@
                    <form id="form-RemoveUserRole" action="@Url.RouteUrl(nameof(UserStoryApiController.RemoveUserRole))">
                        <div>
                            @Html.AntiForgeryToken()
                            <input id="input-RemoveUserRole-UserStory-Id" required="required" hidden="hidden" name="@nameof(RemoveUserRoleApiViewModel.Id)" />
                        </div>
                        <button id="button-RemoveUserRole" type="button" class="btn btn-danger pull-right">Benutzerrolle entfernen</button>
                    <div class="clearfix"></div>
                    </form>
                    @* form-AssignUserRole *@
                    <form id="form-AssignUserRole" action="@Url.RouteUrl(nameof(UserStoryApiController.AssignUserRole))">
                        <div>
                            @Html.AntiForgeryToken()
                            <input id="input-AssignUserRole-UserStory-Id" required="required" hidden="hidden" name="@nameof(AssignUserRoleApiViewModel.Id)" />
                        </div>
                        <div class="form-group">
                            <label class="control-label" for="select-AssignUserRole-UserStory-UserRoleId">Benutzerrolle</label>
                            <select id="select-AssignUserRole-UserStory-UserRoleId" type="text" class="form-control" required="required" name="@nameof(AssignUserRoleApiViewModel.UserRoleId)"></select>
                        </div>
                        <button id="button-AssignUserRole" type="button" class="btn btn-success pull-right">Benutzerrolle zuweisen</button>
                        <div class="clearfix"></div>
                    </form>
                    <hr />
                    @* form-RemoveEpic *@
                    <form id="form-RemoveEpic" action="@Url.RouteUrl(nameof(UserStoryApiController.RemoveEpic))">
                        <div>
                            @Html.AntiForgeryToken()
                            <input id="input-RemoveEpic-UserStory-Id" required="required" hidden="hidden" name="@nameof(RemoveEpicApiViewModel.Id)" />
                        </div>
                        <button id="button-RemoveEpic" type="button" class="btn btn-danger pull-right">Epic entfernen</button>
                        <div class="clearfix"></div>
                    </form>
                    @* form-AssignEpic *@
                    <form id="form-AssignEpic" action="@Url.RouteUrl(nameof(UserStoryApiController.AssignEpic))">
                        <div>
                            @Html.AntiForgeryToken()
                            <input id="input-AssignEpic-UserStory-Id" required="required" hidden="hidden" name="@nameof(AssignEpicApiViewModel.Id)" />
                        </div>
                        <div class="form-group">
                            <label class="control-label" for="select-AssignEpic-UserStory-EpicId">Epic</label>
                            <select id="select-AssignEpic-UserStory-EpicId" class="form-control" required="required" name="@nameof(AssignEpicApiViewModel.EpicId)" ></select>
                        </div>
                        <button id="button-AssignEpic" type="button" class="btn btn-success pull-right">Epic zuweisen</button>
                        <div class="clearfix"></div>
                    </form>
                    <hr />
                    @* form-RemoveTopic *@
                    <form id="form-RemoveTopic" action="@Url.RouteUrl(nameof(UserStoryApiController.RemoveTopic))">
                        <div>
                            @Html.AntiForgeryToken()
                            <input id="input-RemoveTopic-UserStory-Id" required="required" hidden="hidden" name="@nameof(RemoveTopicApiViewModel.Id)" />
                        </div>
                        <button id="button-RemoveTopic" type="button" class="btn btn-danger pull-right">Thema entfernen</button>
                        <div class="clearfix"></div>
                    </form>
                    @* form-AssignTopic *@
                    <form id="form-AssignTopic" action="@Url.RouteUrl(nameof(UserStoryApiController.AssignTopic))">
                        <div>
                            @Html.AntiForgeryToken()
                            <input id="input-AssignTopic-UserStory-Id" required="required" hidden="hidden" name="@nameof(AssignTopicApiViewModel.Id)" />
                        </div>
                        <div class="form-group">
                            <label class="control-label" for="select-AssignTopic-UserStory-TopicId">Thema</label>
                            <select id="select-AssignTopic-UserStory-TopicId" class="form-control" required="required" name="@nameof(AssignTopicApiViewModel.TopicId)"></select>
                        </div>
                        <button id="button-AssignTopic" type="button" class="btn btn-success pull-right">Thema zuweisen</button>
                        <div class="clearfix"></div>
                    </form>
                    <hr />
                    @* form-UpdateStoryPoints *@
                    <form id="form-UpdateStoryPoints" action="@Url.RouteUrl(nameof(UserStoryApiController.UpdateStoryPoints))">
                        <div>
                            @Html.AntiForgeryToken()
                            <input id="input-UpdateStoryPoints-UserStory-Id" required="required" hidden="hidden" name="@nameof(UpdateStoryPointsApiViewModel.Id)" />
                        </div>
                        <div class="form-group">
                            <label class="control-label" for="input-UpdateStoryPoints-UserStory-StoryPoints">Story Points</label>
                            <input id="input-UpdateStoryPoints-UserStory-StoryPoints" type="text" class="form-control" required="required" name="@nameof(UpdateStoryPointsApiViewModel.StoryPoints)" />
                        </div>
                        <button id="button-UpdateStoryPoints" type="button" class="btn btn-success pull-right">Story Points aktualisieren</button>
                        <div class="clearfix"></div>
                    </form>
                    <hr />
                    @* form-UpdateValue *@
                    <form id="form-UpdateValue" action="@Url.RouteUrl(nameof(UserStoryApiController.UpdateValue))">
                        <div>
                            @Html.AntiForgeryToken()
                            <input id="input-UpdateValue-UserStory-Id" required="required" hidden="hidden" name="@nameof(UpdateValueApiViewModel.Id)" />
                        </div>
                        <div class="form-group">
                            <label class="control-label" for="input-UpdateValue-UserStory-Value">Geschäftswert</label>
                            <input id="input-UpdateValue-UserStory-Value" type="text" class="form-control" required="required" name="@nameof(UpdateValueApiViewModel.Value)" />
                        </div>
                        <button id="button-UpdateValue" type="button" class="btn btn-success pull-right">Geschäftswert aktualisieren</button>
                        <div class="clearfix"></div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Schließen</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-xs-12">
        <ul class="nav nav-pills nav-justified" role="tablist">
            <li role="presentation" class="active"><a href="#overview" role="tab" data-toggle="tab">Übersicht</a></li>
            <li role="presentation"><a href="#team" role="tab" data-toggle="tab">Team</a></li>
            <li role="presentation"><a href="#backlog" role="tab" data-toggle="tab">Backlog</a></li>
            <li role="presentation"><a href="#userroles" role="tab" data-toggle="tab">Benutzerrollen</a></li>
            <li role="presentation"><a href="#epics" role="tab" data-toggle="tab">Epics</a></li>
            <li role="presentation"><a href="#topics" role="tab" data-toggle="tab">Themen</a></li>
        </ul>
        <div class="tab-content">
            <div id="overview" class="tab-pane active" role="tabpanel">
                Übersicht
            </div>
            <div id="team" class="tab-pane" role="tabpanel">
                @* table-TeamMembers *@
                <table id="table-TeamMembers" class="table table-striped">
                    <thead>
                        <tr>
                            <th>E-Mail-Adresse</th>
                            <th>Team</th>
                            <th>Rolle</th>
                        </tr>
                    </thead>
                    <tfoot>
                        <tr>
                            <th>E-Mail-Adresse</th>
                            <th>Team</th>
                            <th>Rolle</th>
                        </tr>
                    </tfoot>
                </table>
            </div>
            <div id="backlog" class="tab-pane" role="tabpanel">
                <button type="button" class="btn btn-success pull-right" data-toggle="modal" data-target="#modal-create-UserStory" style="margin-bottom:16px;">User Story erstellen</button>
                @* table-UserStories *@
                <table id="table-UserStories" class="table table-striped">
                    <thead>
                        <tr>
                            <th>Titel</th>
                            <th>User Story</th>
                            <th>Story Points</th>
                            <th>Geschäftswert</th>
                        </tr>
                    </thead>
                    <tfoot>
                        <tr>
                            <th>Titel</th>
                            <th>User Story</th>
                            <th>Story Points</th>
                            <th>Geschäftswert</th>
                        </tr>
                    </tfoot>
                </table> 
            </div>
            <div id="userroles" class="tab-pane" role="tabpanel">
                <button type="button" class="btn btn-success pull-right" data-toggle="modal" data-target="#modal-create-UserRole" style="margin-bottom:16px;">Benutzerrolle erstellen</button>
                <div class="clearfix"></div>
                @* table-UserRoles *@
                <table id="table-UserRoles" class="table table-striped">
                    <thead>
                        <tr>
                            <th>Benutzerrolle</th>
                        </tr>
                    </thead>
                    <tfoot>
                        <tr>
                            <th>Benutzerrolle</th>
                        </tr>
                    </tfoot>
                </table>
            </div>
            <div id="epics" class="tab-pane" role="tabpanel">
                <button type="button" class="btn btn-success pull-right" data-toggle="modal" data-target="#modal-create-Epic" style="margin-bottom:16px;">Epic erstellen</button>
                @* table-Epics *@
                <table id="table-Epics" class="table table-striped">
                    <thead>
                        <tr>
                            <th>Titel</th>
                            <th>Beschreibung</th>
                        </tr>
                    </thead>
                    <tfoot>
                        <tr>
                            <th>Titel</th>
                            <th>Beschreibung</th>
                        </tr>
                    </tfoot>
                </table>
            </div>
            <div id="topics" class="tab-pane" role="tabpanel">
                <button type="button" class="btn btn-success pull-right" data-toggle="modal" data-target="#modal-create-Topic" style="margin-bottom:16px;">Thema erstellen</button>
                @* table-Topics *@
                <table id="table-Topics" class="table table-striped">
                    <thead>
                        <tr>
                            <th>Titel</th>
                            <th>Beschreibung</th>
                        </tr>
                    </thead>
                    <tfoot>
                        <tr>
                            <th>Titel</th>
                            <th>Beschreibung</th>
                        </tr>
                    </tfoot>
                </table> 
            </div>
        </div>
    </div>
</div>

@section scripts{ 
    <script type="text/javascript">
        $(function () {
            var $formCreateUserRole = $('#form-CreateUserRole'),
                $formDeleteUserRole = $('#form-DeleteUserRole'),
                $formUpdateUserRole = $('#form-UpdateUserRole'),
                $formCreateEpic = $('#form-CreateEpic'),
                $formDeleteEpic = $('#form-DeleteEpic'),
                $formUpdateEpic = $('#form-UpdateEpic'),
                $formCreateTopic = $('#form-CreateTopic'),
                $formDeleteTopic = $('#form-DeleteTopic'),
                $formUpdateTopic = $('#form-UpdateTopic'),
                $formCreateUserStory = $('#form-CreateUserStory'),
                $formDeleteUserStory = $('#form-DeleteUserStory'),
                $formUpdateUserStory = $('#form-UpdateUserStory'),
                $formAssignUserRole = $('#form-AssignUserRole'),
                $formAssignEpic = $('#form-AssignEpic'),
                $formAssignTopic = $('#form-AssignTopic'),
                $formUpdateStoryPoints = $('#form-UpdateStoryPoints'),
                $formUpdateValue = $('#form-UpdateValue'),
                $formRemoveUserRole = $('#form-RemoveUserRole'),
                $formRemoveEpic = $('#form-RemoveEpic'),
                $formRemoveTopic = $('#form-RemoveTopic'),
                $modalCreateUserRole = $('#modal-create-UserRole'),
                $modalDetailUserRole = $('#modal-detail-UserRole'),
                $modalCreateEpic = $('#modal-create-Epic'),
                $modalDetailEpic = $('#modal-detail-Epic'),
                $modalCreateTopic = $('#modal-create-Topic'),
                $modalDetailTopic = $('#modal-detail-Topic'),
                $modalCreateUserStory = $('#modal-create-UserStory'),
                $modalDetailUserStory = $('#modal-detail-UserStory'),
                $inputDeleteUserRoleUserRoleId = $('#input-DeleteUserRole-UserRole-Id'),
                $inputUpdateUserRoleUserRoleId = $('#input-UpdateUserRole-UserRole-Id'),
                $inputUpdateUserRoleUserRoleRole = $('#input-UpdateUserRole-UserRole-Role'),
                $inputDeleteEpicEpicId = $('#input-DeleteEpic-Epic-Id'),
                $inputUpdateEpicEpicId = $('#input-UpdateEpic-Epic-Id'),
                $inputUpdateEpicEpicTitle = $('#input-UpdateEpic-Epic-Title'),
                $inputUpdateEpicEpicDescription = $('#input-UpdateEpic-Epic-Description'),
                $inputDeleteTopicTopicId = $('#input-DeleteTopic-Topic-Id'),
                $inputUpdateTopicTopicId = $('#input-UpdateTopic-Topic-Id'),
                $inputUpdateTopicTopicTitle = $('#input-UpdateTopic-Topic-Title'),
                $inputUpdateTopicTopicDescription = $('#input-UpdateTopic-Topic-Description'),
                $inputDeleteUserStoryUserStoryId = $('#input-DeleteUserStory-UserStory-Id'),
                $inputUpdateUserStoryUserStoryId = $('#input-UpdateUserStory-UserStory-Id'),
                $inputUpdateUserStoryUserStoryTitle = $('#input-UpdateUserStory-UserStory-Title'),
                $inputUpdateUserStoryUserStoryStory = $('#input-UpdateUserStory-UserStory-Story'),
                $inputAssignUserRoleUserStoryId = $('#input-AssignUserRole-UserStory-Id'),
                $inputAssignEpicUserStoryId = $('#input-AssignEpic-UserStory-Id'),
                $inputAssignTopicUserStoryId = $('#input-AssignTopic-UserStory-Id'),
                $inputUpdateStoryPointsUserStoryId = $('#input-UpdateStoryPoints-UserStory-Id'),
                $inputUpdateStoryPointsUserStoryStoryPoints = $('#input-UpdateStoryPoints-UserStory-StoryPoints'),
                $inputUpdateValueUserStoryId = $('#input-UpdateValue-UserStory-Id'),
                $inputUpdateValueUserStoryValue = $('#input-UpdateValue-UserStory-Value'),
                $inputRemoveUserRoleUserStoryId = $('#input-RemoveUserRole-UserStory-Id'),
                $inputRemoveEpicUserStoryId = $('#input-RemoveEpic-UserStory-Id'),
                $inputRemoveTopicUserStoryId = $('#input-RemoveTopic-UserStory-Id'),
                $selectAssignUserRoleUserStoryUserRoleId = $('#select-AssignUserRole-UserStory-UserRoleId'),
                $selectAssignEpicUserStoryEpicId = $('#select-AssignEpic-UserStory-EpicId'),
                $selectAssignTopicUserStoryTopicId = $('#select-AssignTopic-UserStory-TopicId'),
                $tableTeamMembers = $('#table-TeamMembers'),
                $tableUserRoles = $('#table-UserRoles'),
                $tableEpics = $('#table-Epics'),
                $tableTopics = $('#table-Topics'),
                $tableUserStories = $('#table-UserStories'),
                $buttonCreateUserRole = $('#button-CreateUserRole'),
                $buttonDeleteUserRole = $('#button-DeleteUserRole'),
                $buttonUpdateUserRole = $('#button-UpdateUserRole'),
                $buttonCreateEpic = $('#button-CreateEpic'),
                $buttonDeleteEpic = $('#button-DeleteEpic'),
                $buttonUpdateEpic = $('#button-UpdateEpic'),
                $buttonCreateTopic = $('#button-CreateTopic'),
                $buttonDeleteTopic = $('#button-DeleteTopic'),
                $buttonUpdateTopic = $('#button-UpdateTopic'),
                $buttonCreateUserStory = $('#button-CreateUserStory'),
                $buttonDeleteUserStory = $('#button-DeleteUserStory'),
                $buttonUpdateUserStory = $('#button-UpdateUserStory'),
                $buttonAssignUserRole = $('#button-AssignUserRole'),
                $buttonAssignEpic = $('#button-AssignEpic'),
                $buttonAssignTopic = $('#button-AssignTopic'),
                $buttonUpdateStoryPoints = $('#button-UpdateStoryPoints'),
                $buttonUpdateValue = $('#button-UpdateValue'),
                $buttonRemoveUserRole = $('#button-RemoveUserRole'),
                $buttonRemoveEpic = $('#button-RemoveEpic'),
                $buttonRemoveTopic = $('#button-RemoveTopic'),
                $body = $('body'),
                dataTableTeamMembers = $tableTeamMembers.DataTable(),
                dataTableUserRoles = $tableUserRoles.DataTable(),
                dataTableEpics = $tableEpics.DataTable(),
                dataTableTopics = $tableTopics.DataTable(),
                dataTableUserStories = $tableUserStories.DataTable(),
                dataTableTeamMembersUrl = '@Url.RouteUrl(nameof(ProductApiController.ProductTeamMembers))',
                dataTableUserRolesUrl = '@Url.RouteUrl(nameof(UserRoleApiController.ProductUserRoles))',
                dataTableEpicsUrl = '@Url.RouteUrl(nameof(EpicApiController.ProductEpicsDataTable))',
                dataTableTopicsUrl = '@Url.RouteUrl(nameof(TopicApiController.ProductTopicsDataTable))',
                dataTableUserStoriesUrl = '@Url.RouteUrl(nameof(UserStoryApiController.ProductUserStoriesDataTable))';
            
            function initDataTableTeamMembers() {
                dataTableTeamMembers.destroy();
                dataTableTeamMembers = $tableTeamMembers.DataTable({ ajax: dataTableTeamMembersUrl });
            }

            function initDataTableUserRoles()
            {
                dataTableUserRoles.destroy();
                dataTableUserRoles = $tableUserRoles.DataTable({
                    ajax: {
                        url: dataTableUserRolesUrl,
                        complete: function (data) {
                            $selectAssignUserRoleUserStoryUserRoleId.find('option')
                                .remove()
                                .end();
                            $selectAssignUserRoleUserStoryUserRoleId.append('<option value="">Keine Benutzerrolle</option>');
                            data.responseJSON.data.forEach(function (item) {
                                var $item = $(item[0]),
                                    id = $item.attr('data-Id'),
                                    role = $item.attr('data-Role');
                                $selectAssignUserRoleUserStoryUserRoleId.append('<option value="' + id + '">' + role + '</option>');
                             });
                        }
                    }
                });
            }

            function initDataTableEpics() {
                dataTableEpics.destroy();
                dataTableEpics = $tableEpics.DataTable({
                    ajax: {
                        url: dataTableEpicsUrl,
                        complete: function (data) {
                            $selectAssignEpicUserStoryEpicId.find('option')
                                .remove()
                                .end();
                            $selectAssignEpicUserStoryEpicId.append('<option value="">Kein Epic</option>');
                            data.responseJSON.data.forEach(function (item) { 
                                var $item = $(item[0]),
                                    id = $item.attr('data-Id'),
                                    title = $item.attr('data-Title');
                                $selectAssignEpicUserStoryEpicId.append('<option value="' + id + '">' + title + '</option>');
                            });
                        }
                    }
                });
            }

            function initDataTableTopics() {
                dataTableTopics.destroy();
                dataTableTopics = $tableTopics.DataTable({
                    ajax: {
                        url: dataTableTopicsUrl,
                        complete: function (data) {
                            $selectAssignTopicUserStoryTopicId.find('option')
                                .remove().end();
                            $selectAssignTopicUserStoryTopicId.append('<option value="">Kein Thema</option>');
                            data.responseJSON.data.forEach(function (item) {
                                var $item = $(item[0]),
                                    id = $item.attr('data-Id'),
                                    title = $item.attr('data-Title');
                                $selectAssignTopicUserStoryTopicId.append('<option value="' + id + '">' + title + '</option>');
                             });
                        }
                    }
                });
            }

            function initDataTableUserStories() {
                dataTableUserStories.destroy();
                dataTableUserStories = $tableUserStories.DataTable({ ajax: dataTableUserStoriesUrl });
            }

            $buttonCreateUserRole.click(function () {
                $formCreateUserRole.find('.has-error').each(function () {
                    $(this).removeClass('has-error');
                });
                if (!$formCreateUserRole[0].checkValidity()) {
                    $formCreateUserRole.find(':invalid').each(function () {
                        $(this).parent().addClass('has-error');
                    });
                    return;
                }
                $.ajax({
                    type: 'POST',
                    url: $formCreateUserRole.attr('action'),
                    data: $formCreateUserRole.serialize(),
                    success: function () {
                        $formCreateUserRole[0].reset();
                        $modalCreateUserRole.modal('hide');
                        initDataTableUserRoles();
                    },
                    error: function () {
                        alert('error');
                    }
                });
            });

            $buttonDeleteUserRole.click(function () {
                $formDeleteUserRole.find('.has-error').each(function () {
                    $(this).removeClass('has-error');
                });
                if (!$formDeleteUserRole[0].checkValidity()) {
                    $formDeleteUserRole.find(':invalid').each(function () {
                        $(this).parent().addClass('has-error');
                    });
                    return;
                }
                $.ajax({
                    type: 'POST',
                    url: $formDeleteUserRole.attr('action'),
                    data: $formDeleteUserRole.serialize(),
                    success: function () {
                        $formDeleteUserRole[0].reset();
                        initDataTableUserRoles();
                        $modalDetailUserRole.modal('hide');
                    },
                    error: function () {
                        alert('error');
                    }
                });
            });

            $buttonUpdateUserRole.click(function () {
                $formUpdateUserRole.find('.has-error').each(function () {
                    $(this).removeClass('has-error');
                });
                if (!$formUpdateUserRole[0].checkValidity()) {
                    $formUpdateUserRole.find(':invalid').each(function () {
                        $(this).parent().addClass('has-error');
                    });
                    return;
                }
                $.ajax({
                    type: 'POST',
                    url: $formUpdateUserRole.attr('action'),
                    data: $formUpdateUserRole.serialize(),
                    success: function () {
                        $formUpdateUserRole[0].reset();
                        initDataTableUserRoles();
                        $modalDetailUserRole.modal('hide');
                    },
                    error: function () {
                        alert('error');
                    }
                });
            });

            $buttonCreateEpic.click(function () {
                $formCreateEpic.find('.has-error').each(function () {
                    $(this).removeClass('has-error');
                });
                if (!$formCreateEpic[0].checkValidity()) {
                    $formCreateEpic.find(':invalid').each(function () {
                        $(this).parent().addClass('has-error');
                    });
                    return;
                }
                $.ajax({
                    type: 'POST',
                    url: $formCreateEpic.attr('action'),
                    data: $formCreateEpic.serialize(),
                    success: function () {
                        $formCreateEpic[0].reset();
                        initDataTableEpics();
                        $modalCreateEpic.modal('hide');
                    },
                    error: function () {
                        alert('error');
                    }
                });
            });

            $buttonDeleteEpic.click(function () {
                $formDeleteEpic.find('.has-error').each(function () {
                    $(this).removeClass('has-error');
                });
                if (!$formDeleteEpic[0].checkValidity()) {
                    $formDeleteEpic.find(':invalid').each(function () {
                        $(this).parent().addClass('has-error');
                    });
                    return;
                }
                $.ajax({
                    type: 'POST',
                    url: $formDeleteEpic.attr('action'),
                    data: $formDeleteEpic.serialize(),
                    success: function () {
                        $formDeleteEpic[0].reset();
                        initDataTableEpics();
                        $modalDetailEpic.modal('hide');
                    },
                    error: function () {
                        alert('error');
                    }
                });
            });

            $buttonUpdateEpic.click(function () {
                $formUpdateEpic.find('.has-error').each(function () {
                    $(this).removeClass('has-error');
                });
                if (!$formUpdateEpic[0].checkValidity()) {
                    $formUpdateEpic.find(':invalid').each(function () {
                        $(this).parent().addClass('has-error');
                    });
                    return;
                }
                $.ajax({
                    type: 'POST',
                    url: $formUpdateEpic.attr('action'),
                    data: $formUpdateEpic.serialize(),
                    success: function () {
                        $formUpdateEpic[0].reset();
                        initDataTableEpics();
                        $modalDetailEpic.modal('hide');
                    },
                    error: function () {
                        alert('error');
                    }
                });
            });

            $buttonCreateTopic.click(function () {
                $formCreateTopic.find('.has-error').each(function () {
                    $(this).removeClass('has-error');
                });
                if (!$formCreateTopic[0].checkValidity()) {
                    $formCreateTopic.find(':invalid').each(function () {
                        $(this).parent().addClass('has-error');
                    });
                    return;
                }
                $.ajax({
                    type: 'POST',
                    url: $formCreateTopic.attr('action'),
                    data: $formCreateTopic.serialize(),
                    success: function () {
                        $formCreateTopic[0].reset();
                        initDataTableTopics();
                        $modalCreateTopic.modal('hide');
                    },
                    error: function () {
                        alert('error');
                    }
                });
            });

            $buttonDeleteTopic.click(function () {
                $formDeleteTopic.find('.has-error').each(function () {
                    $(this).removeClass('has-error');
                });
                if (!$formDeleteTopic[0].checkValidity()) {
                    $formDeleteTopic.find(':invalid').each(function () {
                        $(this).parent().addClass('has-error');
                    });
                    return;
                }
                $.ajax({
                    type: 'POST',
                    url: $formDeleteTopic.attr('action'),
                    data: $formDeleteTopic.serialize(),
                    success: function () {
                        $formDeleteTopic[0].reset();
                        initDataTableTopics();
                        $modalDetailTopic.modal('hide');
                    },
                    error: function () {
                        alert('error');
                    }
                });
            });

            $buttonUpdateTopic.click(function () {
                $formUpdateTopic.find('.has-error').each(function () {
                    $(this).removeClass('has-error');
                });
                if (!$formUpdateTopic[0].checkValidity()) {
                    $formUpdateTopic.find(':invalid').each(function () {
                        $(this).parent().addClass('has-error');
                    });
                    return;
                }
                $.ajax({
                    type: 'POST',
                    url: $formUpdateTopic.attr('action'),
                    data: $formUpdateTopic.serialize(),
                    success: function () {
                        $formUpdateTopic[0].reset();
                        initDataTableTopics();
                        $modalDetailTopic.modal('hide');
                    },
                    error: function () {
                        alert('error');
                    }
                });
            });

            $buttonCreateUserStory.click(function () {
                $formCreateUserStory.find('.has-error').each(function () {
                    $(this).removeClass('has-error');
                });
                if (!$formCreateUserStory[0].checkValidity()) {
                    $formCreateUserStory.find(':invalid').each(function () {
                        $(this).parent().addClass('has-error');
                    });
                    return;
                }
                $.ajax({
                    type: 'POST',
                    url: $formCreateUserStory.attr('action'),
                    data: $formCreateUserStory.serialize(),
                    success: function () {
                        $formCreateUserStory[0].reset();
                        initDataTableUserStories();
                        $modalCreateUserStory.modal('hide');
                    },
                    error: function () {
                        alert('error');
                    }
                });
            });

            $buttonDeleteUserStory.click(function () {
                $formDeleteUserStory.find('.has-error').each(function () {
                    $(this).removeClass('has-error');
                });
                if (!$formDeleteUserStory[0].checkValidity()) {
                    $formDeleteUserStory.find(':invalid').each(function () {
                        $(this).parent().addClass('has-error');
                    });
                    return;
                }
                $.ajax({
                    type: 'POST',
                    url: $formDeleteUserStory.attr('action'),
                    data: $formDeleteUserStory.serialize(),
                    success: function () {
                        $formDeleteUserStory[0].reset();
                        initDataTableUserStories();
                        $modalDetailUserStory.modal('hide');
                    },
                    error: function () {
                        alert('error');
                    }
                });
            });

            $buttonUpdateUserStory.click(function () {
                $formUpdateUserStory.find('.has-error').each(function () {
                    $(this).removeClass('has-error');
                });
                if (!$formUpdateUserStory[0].checkValidity()) {
                    $formUpdateUserStory.find(':invalid').each(function () {
                        $(this).parent().addClass('has-error');
                    });
                    return;
                }
                $.ajax({
                    type: 'POST',
                    url: $formUpdateUserStory.attr('action'),
                    data: $formUpdateUserStory.serialize(),
                    success: function () {
                        $formUpdateUserStory[0].reset();
                        initDataTableUserStories();
                        $modalDetailUserStory.modal('hide');
                    },
                    error: function () {
                        alert('error');
                    }
                });
            });

            $buttonAssignUserRole.click(function () {
                $formAssignUserRole.find('.has-error').each(function () {
                    $(this).removeClass('has-error');
                });
                if (!$formAssignUserRole[0].checkValidity()) {
                    $formAssignUserRole.find(':invalid').each(function () {
                        $(this).parent().addClass('has-error');
                    });
                    return;
                }
                $.ajax({
                    type: 'POST',
                    url: $formAssignUserRole.attr('action'),
                    data: $formAssignUserRole.serialize(),
                    success: function () {
                        $formAssignUserRole[0].reset();
                        initDataTableUserStories();
                        $modalDetailUserStory.modal('hide');
                    },
                    error: function () {
                        alert('error');
                    }
                });
            });

            $buttonAssignEpic.click(function () {
                $formAssignEpic.find('.has-error').each(function () {
                    $(this).removeClass('has-error');
                });
                if (!$formAssignEpic[0].checkValidity()) {
                    $formAssignEpic.find(':invalid').each(function () {
                        $(this).parent().addClass('has-error');
                    });
                    return;
                }
                $.ajax({
                    type: 'POST',
                    url: $formAssignEpic.attr('action'),
                    data: $formAssignEpic.serialize(),
                    success: function () {
                        $formAssignEpic[0].reset();
                        initDataTableUserStories();
                        $modalDetailUserStory.modal('hide');
                    },
                    error: function () {
                        alert('error');
                    }
                });
            });

            $buttonAssignTopic.click(function () {
                $formAssignTopic.find('.has-error').each(function () {
                    $(this).removeClass('has-error');
                });
                if (!$formAssignTopic[0].checkValidity()) {
                    $formAssignTopic.find(':invalid').each(function () {
                        $(this).parent().addClass('has-error');
                    });
                    return;
                }
                $.ajax({
                    type: 'POST',
                    url: $formAssignTopic.attr('action'),
                    data: $formAssignTopic.serialize(),
                    success: function () {
                        $formAssignTopic[0].reset();
                        initDataTableUserStories();
                        $modalDetailUserStory.modal('hide');
                    },
                    error: function () {
                        alert('error');
                    }
                });
            });

            $buttonUpdateStoryPoints.click(function () {
                $formUpdateStoryPoints.find('.has-error').each(function () {
                    $(this).removeClass('has-error');
                });
                if (!$formUpdateStoryPoints[0].checkValidity()) {
                    $formUpdateStoryPoints.find(':invalid').each(function () {
                        $(this).parent().addClass('has-error');
                    });
                    return;
                }
                $.ajax({
                    type: 'POST',
                    url: $formUpdateStoryPoints.attr('action'),
                    data: $formUpdateStoryPoints.serialize(),
                    success: function () {
                        $formUpdateStoryPoints[0].reset();
                        initDataTableUserStories();
                        $modalDetailUserStory.modal('hide');
                    },
                    error: function () {
                        alert('error');
                    }
                });
            });

            $buttonUpdateValue.click(function () {
                $formUpdateValue.find('.has-error').each(function () {
                    $(this).removeClass('has-error');
                });
                if (!$formUpdateValue[0].checkValidity()) {
                    $formUpdateValue.find(':invalid').each(function () {
                        $(this).parent().addClass('has-error');
                    });
                    return;
                }
                $.ajax({
                    type: 'POST',
                    url: $formUpdateValue.attr('action'),
                    data: $formUpdateValue.serialize(),
                    success: function () {
                        $formUpdateValue[0].reset();
                        initDataTableUserStories();
                        $modalDetailUserStory.modal('hide');
                    },
                    error: function () {
                        alert('error');
                    }
                });
            });

            $buttonRemoveUserRole.click(function () {
                $formRemoveUserRole.find('.has-error').each(function () {
                    $(this).removeClass('has-error');
                });
                if (!$formRemoveUserRole[0].checkValidity()) {
                    $formRemoveUserRole.find(':invalid').each(function () {
                        $(this).parent().addClass('has-error');
                    });
                    return;
                }
                $.ajax({
                    type: 'POST',
                    url: $formRemoveUserRole.attr('action'),
                    data: $formRemoveUserRole.serialize(),
                    success: function () {
                        $formRemoveUserRole[0].reset();
                        initDataTableUserStories();
                        $modalDetailUserStory.modal('hide');
                    },
                    error: function () {
                        alert('error');
                    }
                });
            });

            $buttonRemoveEpic.click(function () {
                $formRemoveEpic.find('.has-error').each(function () {
                    $(this).removeClass('has-error');
                });
                if (!$formRemoveEpic[0].checkValidity()) {
                    $formRemoveEpic.find(':invalid').each(function () {
                        $(this).parent().addClass('has-error');
                    });
                    return;
                }
                $.ajax({
                    type: 'POST',
                    url: $formRemoveEpic.attr('action'),
                    data: $formRemoveEpic.serialize(),
                    success: function () {
                        $formRemoveEpic[0].reset();
                        initDataTableUserStories();
                        $modalDetailUserStory.modal('hide');
                    },
                    error: function () {
                        alert('error');
                    }
                });
            });

            $buttonRemoveTopic.click(function () {
                $formRemoveTopic.find('.has-error').each(function () {
                    $(this).removeClass('has-error');
                });
                if (!$formRemoveTopic[0].checkValidity()) {
                    $formRemoveTopic.find(':invalid').each(function () {
                        $(this).parent().addClass('has-error');
                    });
                    return;
                }
                $.ajax({
                    type: 'POST',
                    url: $formRemoveTopic.attr('action'),
                    data: $formRemoveTopic.serialize(),
                    success: function () {
                        $formRemoveTopic[0].reset();
                        initDataTableUserStories();
                        $modalDetailUserStory.modal('hide');
                    },
                    error: function () {
                        alert('error');
                    }
                });
            });
            
            $body.on('click', '.ajax-data-table-TeamMember', function () {
                var $this = $(this), id = $this.attr('data-Id');
            });

            $body.on('click', '.ajax-data-table-UserRole', function () {
                var $this = $(this),
                    id = $this.attr('data-Id'),
                    role = $this.attr('data-Role');

                $inputDeleteUserRoleUserRoleId.val(id);
                $inputUpdateUserRoleUserRoleId.val(id);
                $inputUpdateUserRoleUserRoleRole.val(role);

                $modalDetailUserRole.modal();
            });

            $body.on('click', '.ajax-data-table-Epic', function () {
                var $this = $(this),
                    id = $this.attr('data-Id'),
                    title = $this.attr('data-Title'),
                    description = $this.attr('data-Description');

                $inputDeleteEpicEpicId.val(id);
                $inputUpdateEpicEpicId.val(id);
                $inputUpdateEpicEpicTitle.val(title);
                $inputUpdateEpicEpicDescription.val(description);

                $modalDetailEpic.modal();
            });

            $body.on('click', '.ajax-data-table-Topic', function () {
                var $this = $(this),
                    id = $this.attr('data-Id'),
                    title = $this.attr('data-Title'),
                    description = $this.attr('data-Description');

                $inputDeleteTopicTopicId.val(id);
                $inputUpdateTopicTopicId.val(id);
                $inputUpdateTopicTopicTitle.val(title);
                $inputUpdateTopicTopicDescription.val(description);

                $modalDetailTopic.modal();
            });

            $body.on('click', '.ajax-data-table-UserStory', function () {
                var $this = $(this),
                    id = $this.attr('data-Id'),
                    title = $this.attr('data-Title'),
                    story = $this.attr('data-Story'),
                    userRoleId = $this.attr('data-UserRoleId'),
                    epicId = $this.attr('data-EpicId'),
                    topicId = $this.attr('data-TopicId'),
                    storyPoints = $this.attr('data-StoryPoints'),
                    value = $this.attr('data-Value');

                $inputDeleteUserStoryUserStoryId.val(id);
                $inputUpdateUserStoryUserStoryId.val(id);
                $inputUpdateUserStoryUserStoryTitle.val(title);
                $inputUpdateUserStoryUserStoryStory.val(story);
                $inputAssignUserRoleUserStoryId.val(id);
                $selectAssignUserRoleUserStoryUserRoleId.find('> option[value="' + userRoleId + '"]')
                    .attr('selected', 'selected');
                $inputAssignEpicUserStoryId.val(id);
                $selectAssignEpicUserStoryEpicId.find('> option[value="' + epicId + '"]')
                    .attr('selected', 'selected');
                $inputAssignTopicUserStoryId.val(id);
                $selectAssignTopicUserStoryTopicId.find('> option[value="' + topicId + '"]')
                    .attr('selected', 'selected');
                $inputUpdateStoryPointsUserStoryId.val(id);
                $inputUpdateStoryPointsUserStoryStoryPoints.val(storyPoints);
                $inputUpdateValueUserStoryId.val(id);
                $inputUpdateValueUserStoryValue.val(value);
                $inputRemoveUserRoleUserStoryId.val(id);
                $inputRemoveEpicUserStoryId.val(id);
                $inputRemoveTopicUserStoryId.val(id);

                $modalDetailUserStory.modal();
            });

            (function () {
                initDataTableTeamMembers();
                initDataTableUserRoles();
                initDataTableEpics();
                initDataTableTopics();
                initDataTableUserStories();
            })();
        });
    </script>
}